import contextlib
import random
from datetime import datetime, timedelta

import aiogram.utils.exceptions

import messages
import config
import inline_keyboard

import sqlite3
import logging
import asyncio
import aioschedule
from contextlib import suppress
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardRemove
from aiogram.utils.exceptions import (MessageCantBeDeleted, MessageToDeleteNotFound)
from aiogram.dispatcher.filters.state import State, StatesGroup
from apscheduler.schedulers.asyncio import AsyncIOScheduler

import os
import json
import wave
from pathlib import Path
from vosk import Model, KaldiRecognizer

scheduler = AsyncIOScheduler()
scheduler.start()
logging.basicConfig(level=logging.INFO)

bot = Bot(token=config.BOT_API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

delay_flood = 10
conn = sqlite3.connect('./mydatabase.db')
cur = conn.cursor()

model = Model(r"vosk-model-small-ru-0.22")


class Form(StatesGroup):
    zodiac = State()
    day = State()


class User(StatesGroup):
    username_recipient = State()
    sum = State()


async def anti_flood_command(*args, **kwargs):
    m = args[0]
    await delete_message(m)


@dp.message_handler(commands=['help', 'start'])
@dp.throttled(anti_flood_command, rate=delay_flood)
async def show_help(message: types.Message):
    await message.answer(text=messages.helper())


@dp.message_handler(commands=['gsl'])
async def sonya(message: types.Message):
    cur.execute(f"SELECT * FROM users where userid='1232593975';")
    sonya_data = cur.fetchall()
    wallet = sonya_data[0][3] + 1000
    sql_update_query = f"""Update users set balance = {wallet} where userid = 1232593975"""  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    cur.execute(sql_update_query)
    conn.commit()
    await message.answer("–î–æ–±–∞–≤–∏–ª —Ç–µ–±–µ 1000 LY –ª—é–±–∏–º–∞—è‚ù§")


@dp.message_handler(commands=['getdatacasino'])
async def show_data_casino(message: types.Message):
    if message.from_user.id == config.ADMIN_ID:
        await message.answer_document(open("mydatabase.db", 'rb'))
    else:
        await message.answer(text="–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")


async def daily_accrual():
    cur.execute("SELECT * FROM users;")
    users = cur.fetchall()
    for i in users:
        balance = i[3]
        sql_update_query = f"""Update users set balance = {balance + 1000} where userid = {i[0]}"""  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        cur.execute(sql_update_query)
        conn.commit()


async def scheduler_timer():
    aioschedule.every().day.at("00:00").do(daily_accrual)
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)


async def on_startup(dp):
    asyncio.create_task(scheduler_timer())


@dp.callback_query_handler(text='casino_rules')
async def casinorule(call: types.CallbackQuery):
    casino_scale_img = open("casino_scale.jpg", 'rb')
    hello_msg = f'–ü—Ä–∞–≤–∏–ª–∞:\n' \
                f'–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 00:00 –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è 1000 LY\n' \
                f'–î–ª—è —Ç–æ–≥–æ —á—Ç–æ-–±—ã –ø–æ–ø—ã—Ç–∞—Ç—å —Å–≤–æ—é —É–¥–∞—á—É –Ω–∞–ø–∏—à–∏—Ç–µ: /casino 100 (–≥–¥–µ 100 —ç—Ç–æ –≤–∞—à–∞ —Å—Ç–∞–≤–∫–∞)\n' \
                f'–î–ª—è —Ç–æ–≥–æ —á—Ç–æ-–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ: /casino\n' \
                f'–î–ª—è —Ç–æ–≥–æ —á—Ç–æ-–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ –Ω–∞–ø–∏—à–∏—Ç–µ: /casinoleaderboard\n' \
                f'–ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –≤—ã—à–µ\n\n' \
                f'–£–¥–∞—á–∏ –∏ –ø—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã‚úä'
    await bot.send_photo(chat_id=call.message.chat.id, photo=casino_scale_img, caption=hello_msg,
                         disable_notification=True)
    casino_scale_img.close()


@dp.message_handler(commands=['casino'])
async def response_casino(message: types.Message):
    msg_user_id = message.from_user.id  # –ü–æ–ª—É—á–µ–Ω–∏–µ id –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    cur.execute(f"SELECT * FROM users where userid='{msg_user_id}';")
    user_data = cur.fetchall()
    bet = message.text.replace('/casino', '')
    bet = bet.replace('@DJLYbot', '')
    bet = bet.strip()
    INFO_CASINO_BTN_GROUP = [types.InlineKeyboardButton(text="–ü—Ä–∞–≤–∏–ª–∞‚ùó", callback_data="casino_rules"),
                             types.InlineKeyboardButton(text="–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤üëë", callback_data="top_players"),
                             types.InlineKeyboardButton(text="–û –ø–æ–¥–∞—Ä–∫–∞—ÖüéÅ‚ùì", callback_data="gift_info"),
                             types.InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫üéÅ", callback_data="send_a_gift")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*INFO_CASINO_BTN_GROUP)
    if not user_data:
        user = (msg_user_id, message.from_user.full_name, message.from_user.username, '1000', '0')
        cur.execute("INSERT INTO users VALUES(?, ?, ?, ?, ?);", user)
        conn.commit()
        casino_scale_img = open("casino_scale.jpg", 'rb')
        hello_msg = f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}üëã\n' \
                    f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CASINOüé∞\n' \
                    f'–ü—Ä–∞–≤–∏–ª–∞:\n' \
                    f'–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 00:00 –ø–æ –ú–°–ö –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è 1000 LY\n' \
                    f'–î–ª—è —Ç–æ–≥–æ —á—Ç–æ-–±—ã –ø–æ–ø—ã—Ç–∞—Ç—å —Å–≤–æ—é —É–¥–∞—á—É –Ω–∞–ø–∏—à–∏—Ç–µ: /casino 100 (–≥–¥–µ 100 —ç—Ç–æ –≤–∞—à–∞ —Å—Ç–∞–≤–∫–∞)\n' \
                    f'–î–ª—è —Ç–æ–≥–æ —á—Ç–æ-–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ: /casino\n' \
                    f'–ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –≤—ã—à–µ\n\n' \
                    f'–í–∞—à –±–∞–ª–∞–Ω—Å: 1000 LY\n\n' \
                    f'–£–¥–∞—á–∏ –∏ –ø—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã‚úä'
        await bot.send_photo(chat_id=message.chat.id,
                             photo=casino_scale_img,
                             caption=hello_msg,
                             disable_notification=True,
                             reply_markup=keyboard)
        casino_scale_img.close()
    else:
        cur.execute(f'Update users set username=?, fullname=? where userid = {msg_user_id}',
                    (message.from_user.username, message.from_user.full_name))
        conn.commit()
        balance = user_data[0][3]
        all_spins = user_data[0][4]
        if bet == '':
            timer = messages.timer()
            await message.answer(f'–î–ª—è –∏–≥—Ä—ã –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É (–ü—Ä–∏–º–µ—Ä: /casino 100)\n'
                                 f'–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} LY\n'
                                 f'–î–æ –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã {timer[0]} —á. {timer[1]} –º–∏–Ω.\n'
                                 f'–°–ø–∏–Ω–æ–≤ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {all_spins}', disable_notification=True, reply_markup=keyboard)
        else:
            try:
                bet = float(bet)
                await show_roll(message, user_data, bet, msg_user_id, all_spins)
            except Exception:
                await message.answer(f'–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º', disable_notification=True)


async def show_roll(message: types.Message, user_data, bet: float, msg_user_id, all_spins):
    timer = messages.timer()
    wallet = user_data[0][3]
    date = datetime.now() + timedelta(seconds=2.5)
    point = bet
    random_phrases_win = ["–°–µ–≥–æ–¥–Ω—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ —Ç–≤–æ–π –¥–µ–Ω—åüòé",
                          "–¢—ã –º–µ–Ω—è –æ–±–æ–∫—Ä–∞—Å—Ç—å —Ö–æ—á–µ—à—å?üòÑ",
                          "–ú–Ω–µ –±—ã —Ç–≤–æ—é —É–¥–∞—á—Éüòä",
                          "–ê —Ç—ã —Å–æ –º–Ω–æ–π –ø–æ–¥–µ–ª–∏—à—å—Å—è?üòç",
                          "–î–∞ –∫–∞–∫ —Ç–∞–∫–æ–µ –≤–æ–∑–º–æ–∂–Ω–æ?üò±"]

    random_phrases_lose = ["–ê —á—Ç–æ —è? –Ø —Ç—É—Ç –Ω–µ –ø—Ä–∏ —á–µ–ºüòÇ",
                           "–ù—É –¥–∞–≤–∞–π, —Å–∫–∞–∂–∏ –ø–æ–ø—É–ª—è—Ä–Ω—É—é —Ñ—Ä–∞–∑—É –ø—Ä–æ –∫–∞–∑–∏–Ω–æüòè",
                           "–ú–æ–∂–µ—Ç –ø–æ—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è?ü§®",
                           "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—à–∏ —Ä–∞–∑—Ä–∞–±—É, –º–æ–∂–µ—Ç –ø–æ–¥–∫—Ä—É—Ç–∏—Çüòâ",
                           "–•–æ—Ä–æ—à–æ —á—Ç–æ —ç—Ç–æ –Ω–µ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏, –ø—Ä–∞–≤–¥–∞?üòú"]
    await delete_message(message)
    if point == '':
        await message.answer(text="–°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É")
    else:
        point = float(point)
        if 0 < point <= wallet:
            roll = await message.answer_dice(emoji='üé∞')
            result_msg = await message.answer(f'–ò–ì–†–ê–ï–ú\n{message.from_user.full_name}\n'
                                              f'–°—Ç–∞–≤–∫–∞: {point} LY\n'
                                              f'–í–∞—à –±–∞–ª–∞–Ω—Å: {wallet} LY', disable_notification=True)
            result = roll.dice.value
            scale = {11: 1.25,
                     27: 1.25,
                     35: 1.25,
                     39: 1.25,
                     41: 1.25,
                     42: 1.25,
                     44: 1.25,
                     47: 1.25,
                     59: 1.25,
                     16: 1.5,
                     32: 1.5,
                     48: 1.5,
                     52: 1.5,
                     56: 1.5,
                     60: 1.5,
                     61: 1.5,
                     62: 1.5,
                     63: 1.5,
                     1: 2,
                     22: 5,
                     43: 7,
                     64: 10}
            try:
                win = scale[result]
                wallet += point * win
                all_spins += 1
                win_msg = f'{random.choice(random_phrases_win)}\n' \
                          f'{message.from_user.full_name}\n' \
                          f'–°—Ç–∞–≤–∫–∞: {point} LY\n' \
                          f'–í–∞—à –≤—ã–π–≥—Ä—ã—à: {point * win} LY\n' \
                          f'–í–∞—à –±–∞–ª–∞–Ω—Å: {wallet} LY'
                scheduler.add_job(edit_msg, "date", run_date=date, kwargs={"message": result_msg, "m_text": win_msg})
                sql_update_query = f"""Update users set balance = {wallet}, spins={all_spins} where userid = {msg_user_id}"""  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
                cur.execute(sql_update_query)
                conn.commit()
            except KeyError:
                wallet -= point
                all_spins += 1
                lose_msg = f'{random.choice(random_phrases_lose)}\n' \
                           f'{message.from_user.full_name}\n' \
                           f'–°—Ç–∞–≤–∫–∞: {point} LY\n' \
                           f'–í–∞—à –±–∞–ª–∞–Ω—Å: {wallet} LY'
                scheduler.add_job(edit_msg, "date", run_date=date, kwargs={"message": result_msg, "m_text": lose_msg})
                sql_update_query = f"""Update users set balance = {wallet}, spins={all_spins} where userid = {msg_user_id}"""  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
                cur.execute(sql_update_query)
                conn.commit()
        else:
            await message.answer(
                f'–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫—É—é —Å—Ç–∞–≤–∫—É\n–í–∞—à –±–∞–ª–∞–Ω—Å: {wallet} LY\n–î–æ –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã {timer[0]} —á. {timer[1]} –º–∏–Ω.',
                disable_notification=True)


async def edit_msg(message: types.Message, m_text: str):
    await message.edit_text(m_text)


@dp.message_handler(commands=['new'])
async def show_weather(message: types.Message):
    if message.from_user.id == config.ADMIN_ID:
        cur.execute(f"SELECT * FROM users;")
        users = cur.fetchall()
        for i in users:
            with contextlib.suppress(Exception):
                gift_img = open("gift_info.jpg", 'rb')
                await bot.send_photo(chat_id=i[0], photo=gift_img, caption=gift_info_msg())
                await bot.send_sticker(chat_id=i[0], sticker="CAACAgIAAxkBAAEG8SRjpDbrQnqEH8OzE5yVJ8ENRSqZEQACuwUAAj-VzArB-QxoNNQdNiwE")
                gift_img.close()
    else:
        await message.answer(text="–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")


@dp.callback_query_handler(text="gift_info")
async def gift_info(call: types.CallbackQuery):
    gift_img = open("gift_info.jpg", 'rb')
    await bot.send_photo(chat_id=call.message.chat.id, photo=gift_img, caption=gift_info_msg())
    gift_img.close()

def gift_info_msg():
    info_msg = (f'–í –ø—Ä–µ–¥–¥–≤–µ—Ä–∏–∏ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–∞—Ä–∫–æ–≤üéÅüéÑ\n' \
               f'–¢–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–¥–∞—Ä–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –¥—Ä—É–≥–æ–º—É, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫üéÅ" –∏ –∑–∞–ø–æ–ª–Ω–∏–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ\n' \
               f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö LY –≤ –ø–æ–¥–∞—Ä–∫–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–º–∏—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ\n\n' \
               f'–° –Ω–∞—Å—Ç—É–ø–∞—é—â–∏–º –ù–æ–≤—ã–º –≥–æ–¥–æ–ºüéÑ‚ùÑ')
    return info_msg


@dp.callback_query_handler(text="send_a_gift")
async def send_a_gift(call: types.CallbackQuery):
    await User.username_recipient.set()
    await bot.send_message(chat_id=call.message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ (–ø—Ä–∏–º–µ—Ä: @DJLYbot)")


@dp.message_handler(state=User.username_recipient)
async def process_username_recipient(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['username_recipient'] = message.text[1:]
    await User.next()
    await message.answer("–°–∫–æ–ª—å–∫–æ LY –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ä–∏—Ç—å?")


@dp.message_handler(state=User.sum)
async def process_sum(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['sum'] = message.text
    recipient = cur.execute('SELECT * FROM `users` WHERE username = ?', (data['username_recipient'],)).fetchall()
    if not recipient:
        await message.answer("–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª –∏–≥—Ä–∞—Ç—å –≤ –Ω–∞—à–µ CASINOüßê")
    else:
        if recipient[0][0] == message.chat.id:
            await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ —Å–∞–º–æ–º–æ–º—É —Å–µ–±–µ. –ù–µ –±—É–¥—å—Ç–µ –∂–∞–¥–∏–Ω–æ–π, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏üòí")
        else:
            balance_recipient = recipient[0][3]
            balance_sender = (cur.execute('SELECT * FROM `users` WHERE userid = ?', (message.chat.id,)).fetchall())[0][3]
            try:
                if float(data['sum']) > balance_sender or float(data['sum']) < 0:
                    await message.answer(f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å—Ç–æ–ª—å–∫–æ –ø–æ–¥–∞—Ä–∏—Ç—å!üôÑ\n–í–∞—à –±–∞–ª–∞–Ω—Å {balance_sender} LY")
                else:
                    gift_img = open("gift.jpg", 'rb')
                    cur.execute(f"Update users set balance = {balance_recipient+float(data['sum'])} where userid = {recipient[0][0]}")
                    cur.execute(f"Update users set balance = {balance_sender - float(data['sum'])} where userid = {message.chat.id}")
                    conn.commit()
                    await bot.send_photo(chat_id=recipient[0][0], photo=gift_img, caption=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="https://t.me/{message.from_user.username}">{message.from_user.full_name}</a> –ø–æ–¥–∞—Ä–∏–ª –≤–∞–º {data["sum"]} LY', parse_mode='HTML')
                    await message.answer(text=f'–í—ã –ø–æ–¥–∞—Ä–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <a href="https://t.me/{recipient[0][2]}">{recipient[0][2]}</a> {data["sum"]} LY', disable_web_page_preview=True, parse_mode='HTML')
                    gift_img.close()
            except ValueError:
                await message.answer(text="–•–∞ —Ö–∞ —Ö–∞, —Ö–æ—Ä–æ—à–∞—è –ø–æ–ø—ã—Ç–∫–∞. –°—É–º–º–∞ –ø–æ–¥–∞—Ä–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!!!")
    await state.finish()


@dp.message_handler(commands=['weather'])
@dp.throttled(anti_flood_command, rate=delay_flood)
async def show_weather(message: types.Message):
    await message.answer(text=messages.weather())


@dp.message_handler(commands=['horoscope'])
@dp.throttled(anti_flood_command, rate=delay_flood)
async def show_horoscope(message: types.Message):
    await Form.zodiac.set()
    await message.answer(text="–ö–∞–∫–æ–π —É —Ç–µ–±—è –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞?", reply_markup=inline_keyboard.ZODIAC_SIGN)


@dp.message_handler(state=Form.zodiac)
async def process_zodiac(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['zodiac'] = message.text
    await Form.next()
    await message.answer("–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ç—ã —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø?", reply_markup=inline_keyboard.DAY)


@dp.message_handler(state=Form.day)
async def process_day(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['day'] = message.text
    await message.answer(messages.horoscope_message(data['zodiac'], data['day']), reply_markup=ReplyKeyboardRemove())
    await state.finish()


@dp.callback_query_handler(text='top_players')
async def casino_leaderboard(call: types.CallbackQuery):
    cur.execute(f"SELECT * FROM users ORDER BY balance DESC LIMIT 10;")
    player = cur.fetchall()
    top_player = '–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –≤ CASINO üòéüëë:\n'
    place_num = 1
    for i in player:
        top_player += f'{place_num}   <a href="https://t.me/{i[2]}">{i[1]}</a>   {i[3]}\n'
        place_num += 1
    await call.message.edit_text(text=top_player, disable_web_page_preview=True, parse_mode='HTML')


@dp.message_handler(content_types=["text"])
async def get_member(message: types.Message):
    if "/all" in message.text.lower():
        with suppress(Exception):
            chat_admins = await bot.get_chat_administrators(message.chat.id)
            usernames = ""
            for i in chat_admins:
                if i.user.username == "DJLYbot" or i.user.username == message.from_user.username or i.user.username == None:
                    pass
                else:
                    usernames += f"@{i.user.username}\n"
            if usernames != "":
                await message.answer(usernames)


async def delete_message(message: types.Message, sleep_time: int = 0):
    await asyncio.sleep(sleep_time)
    with suppress(MessageCantBeDeleted, MessageToDeleteNotFound):
        await message.delete()


@dp.message_handler(content_types=types.ContentType.NEW_CHAT_MEMBERS)
async def somebody_added(message: types.Message):
    for user in message.new_chat_members:
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {user.full_name}")


async def convert_ogg_to_wav(msg_name: str, path: str):
    os.system(f'ffmpeg -i {path}/{msg_name}.ogg -ar 16000 -ac 2 -ab 192K -f wav {path}/{msg_name}.wav')
    # os.remove(f'{path}/{msg_name}.ogg')


async def speech_to_text(model: Model, msg_name: str, path: str):
    wf = wave.open(f'{path}/{msg_name}.wav', "rb")
    rec = KaldiRecognizer(model, 44100)
    result = ''
    last_n = False
    while True:
        data = wf.readframes(44100)
        if len(data) == 0:
            break
        if rec.AcceptWaveform(data):
            res = json.loads(rec.Result())
            if res['text'] != '':
                result += f" {res['text']}"
                last_n = False
            elif not last_n:
                result += '\n'
                last_n = True
    res = json.loads(rec.FinalResult())
    result += f" {res['text']}"
    wave.Wave_read.close(wf)
    os.remove(f'{path}/{msg_name}.ogg')
    os.remove(f'{path}/{msg_name}.wav')
    return result


async def handle_file(file: types.File, file_name: str, path: str):
    Path(f"{path}").mkdir(parents=True, exist_ok=True)
    await bot.download_file(file_path=file.file_path, destination=f"{path}/{file_name}")


@dp.message_handler(content_types=[types.ContentType.VOICE])
async def voice_message_handler(message: types.Message):
    voice = await message.voice.get_file()
    path = "./files/voices"
    await handle_file(file=voice, file_name=f"{voice.file_id}.ogg", path=path)
    await convert_ogg_to_wav(msg_name=f"{voice.file_id}", path=path)
    msg_response = await speech_to_text(model=model, msg_name=f"{voice.file_id}", path=path)
    try:
        await message.reply(msg_response)
    except aiogram.utils.exceptions.BadRequest:
        await message.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–ª–æ–≤–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
